/*



 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Analytics.Controller;
import Analytics.FileAnalyzer;
import Coupling.Coupling;
import Coupling.CouplingMain;
import Coupling.CustomFile;
import MultipleFileUtility.UnzipUtility;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;




/**
 *
 * @author Sachintha
 */
public class MultipleMain extends javax.swing.JFrame {
    String filetype;
    String filepath;
    String filename;
    ArrayList<String> multipleCoupling = new ArrayList<>();
    ArrayList<String> multipleCouplingResults = new ArrayList<>();
    ArrayList<CustomFile> fileList = new ArrayList<>();
    
   // String zipfilePath;
    //String zipDestination;

    File fl,flzip;
    FileReader read;
    BufferedReader br;
    FileInputStream fis;
    byte[] fileArray;
   ZipInputStream zis;
    ZipEntry ze;
    CouplingMain multipleMain = new CouplingMain();
    String UPLOAD_DIRECTORY = System.getProperty("user.dir") + "\\uploads\\";
   
    /**
     * Creates new form MultipleMain
     */
    public MultipleMain() {
        initComponents();
        setSize(1050,900);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FileBrowseButton = new javax.swing.JButton();
        selectedPathField = new javax.swing.JTextField();
        filNameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        FileTypeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Code Complexity Tool");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Select the Java file for evaluation");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, -1, -1));

        FileBrowseButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        FileBrowseButton.setText("Browse");
        FileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileBrowseButtonActionPerformed(evt);
            }
        });
        getContentPane().add(FileBrowseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 100, -1, -1));

        selectedPathField.setEditable(false);
        selectedPathField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        selectedPathField.setText("Selected Fiile Path");
        getContentPane().add(selectedPathField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 770, -1));

        filNameField.setEditable(false);
        filNameField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        filNameField.setText("File Name");
        getContentPane().add(filNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, 770, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Selected File Type :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 280, -1, -1));

        FileTypeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        FileTypeLabel.setText("--");
        getContentPane().add(FileTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 280, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileBrowseButtonActionPerformed

        //Selecting the file from file explorer
        JFileChooser choose = new JFileChooser();
        File workingDir = new File(System.getProperty("user.dir"));
        choose.setCurrentDirectory((workingDir));
        choose.showOpenDialog(null);

        //Getting the absolute file path and file name to display
        fl = choose.getSelectedFile();
        filepath = fl.getAbsolutePath();
        String flname = fl.getName();
        selectedPathField.setText((filepath));
        filNameField.setText(flname);
        filename = fl.getName();

        //Deciding whether if it is a Java file or C++ file
        if(filepath.toLowerCase().endsWith(".zip"))
        {
            String filetype;
            filetype = "zip";
            FileTypeLabel.setText("Zip");
            
            //System.out.println("File path : "+filepath);
            unZipFolder(filepath,filepath,fl);
           //multipleCoupling
            for(int i=0; i< fileList.size(); i++)
            {
                AnalyzerForm anzf = new AnalyzerForm();
                
                String tempfilepath;
                String tempfilename = fileList.get(i).getFileName();
                
                    read = null;
                    br = null;
                    
               tempfilepath = fileList.get(i).getFilePath();
               System.out.println(tempfilepath);
            try 
            {
                read = new FileReader(tempfilepath);
            } 
            catch (FileNotFoundException ex) 
            {
                System.out.println(ex);
            }
                    br = new BufferedReader(read);
                    
                    String tempcode = br.toString();
                    Controller tempctrl = new Controller();
                    
                    tempctrl.setStrArr(tempcode.split("\\n"));
                    
            try 
            {
                anzf.getControlStructureConplexity(tempfilepath);
                anzf.getInheritanceCode(tempfilepath);
                anzf.getInheritanceAnalyzer(tempctrl.InheritanceAnalyzer(tempctrl.getStrArr()));
                
                anzf.getSizeComplexity(tempfilepath);
                anzf.getCodeText(tempfilepath);
                anzf.getMethodComplexity(tempfilepath);
                
                anzf.getCouplingCode(tempfilepath);
                anzf.getCouplingResults(multipleCoupling);
                
                String [] tmpstr = tempctrl.getStrArr();
                anzf.getVariableComplexity(tmpstr, tempfilepath);
            } catch (IOException ex) {
                System.out.println(ex);
            }   catch (Exception ex) {
                System.out.println(ex);
                }
                    
                
                
                anzf.setVisible(true);
            }
            
        }
        else if(filepath.toLowerCase().endsWith(".cpp"))
        {
            String filetype;
            filetype = "cpp";
            FileTypeLabel.setText("C++");
        }

        //Viewing the code in the text area
        try
        {
            read = new FileReader(filepath);
            br = new BufferedReader(read);
            //CodeViewer.read(br, null);
            //br.close();
            //CodeViewer.requestFocus();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }

        /*try
        {
            int lineCount;
            lineCount = analit.LineCounter(filepath);
            NumOfLines.setText(Integer.toString(lineCount));

        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }*/

    }//GEN-LAST:event_FileBrowseButtonActionPerformed

    public void unZipFolder(String zipfilepath, String desDir, File filzip)
    {
        zipfilepath = filzip.getAbsolutePath();
        desDir = UPLOAD_DIRECTORY;//filzip.getAbsolutePath();
        String name = filzip.getName();
        //System.out.println("zipfilepath : "+zipfilepath );
        //System.out.println("File name : "+name);
        UnzipUtility unzipper = new UnzipUtility();
        try
        {
            
            unzipper.unzip(zipfilepath, desDir);
            Files.deleteIfExists(Paths.get(UPLOAD_DIRECTORY + name));

								File folder = new File(UPLOAD_DIRECTORY + name.split("\\.")[0]);
								File[] listOfFiles = folder.listFiles();

								
								
								for (int i = 0; i < listOfFiles.length; i++) {
									if (listOfFiles[i].isFile()) {
										CustomFile codeFile = new CustomFile(listOfFiles[i].getName());
										codeFile.setFilePath(UPLOAD_DIRECTORY + name.split("\\.")[0] + "\\"+listOfFiles[i].getName());
                                                                                System.out.println(codeFile.getFilePath());
                                                                                
										fileList.add(codeFile);
									}
								}
								multipleMain.setFileList(fileList);
                                                                multipleMain.Start();
                                                                multipleCoupling = multipleMain.getCouplingResults();
            
        }
        catch(IOException ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
//                    fis = new FileInputStream(zipfilepath);
//                    zis = new ZipInputStream(fis);
//                    
//                    ze = zis.getNextEntry();
//                    
//                    while(ze != null)
//                    {
//                        String filname = ze.getName();
//                        File newfile = new File(desDir + File.separator + filname);
//                        System.out.println("Unzipped to : "+newfile.getAbsolutePath());
//                        
//                        new File(newfile.getParent()).mkdirs();
//                        
//                        FileOutputStream fos = new FileOutputStream(newfile);
//                        int len;
//                        while((len = zis.read(fileArray))>0)
//                        {
//                            fos.write(fileArray, 0, len);
//                        }
//                        fos.close();
//                        zis.closeEntry();
//                        ze = zis.getNextEntry();
//                    }
//                    zis.closeEntry();
//                    zis.close();
//                    fis.close();
//                    JOptionPane.showMessageDialog(null, "File Zip Completed");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MultipleMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MultipleMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MultipleMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MultipleMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MultipleMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FileBrowseButton;
    private javax.swing.JLabel FileTypeLabel;
    private javax.swing.JTextField filNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField selectedPathField;
    // End of variables declaration//GEN-END:variables
}
